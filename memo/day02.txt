day02
복습 -> 브랜치 -> 원격 레포지토리 -> 실습

0. 복습
버전
	프로그램을 수정하여 개선한 것
	1.1	메이저버전번호.마이너버전번호
	1.1.1	메이저버전번호.마이너버전번호.패치버전번호

버전번호
	소프트웨어나 프로젝트의 업데이트 레벨을 식별하기 위해 사용

버전관리
	로컬/원격

버전관리시스템
	git, svn

git-hub
	git을 저장하고 공유할 수 있는 서버를 제공하는 사이트
	
git 구조
	working directory(작업폴더)
		작업하는 공간
		git init => .git

		파일의 상태	untracked

	staging area(스테이징 영역)
		스테이징 영역에 있는 파일들은 git의 관리 대상
		git add . or git add 파일명
		
		파일의상태		tracked
		tracked 상태의 종류 3가지
			unmodified	수정이 되지 않은 상태
			modified	수정이 된 상태
			staged		로컬 저장소에 올릴 준비가 완료된 상태
	
	local repository
		staged 상태의 파일을 commit 하면 로컬 저장소에 저장된다

	remote repository
		git-hub 원격 저장소
		원격 저장소에 올리기 위해 git-hub 저장공간(repository)을 만들고
		그 주소를 git bash를 이용해 연결해주는 작업이 선행되어야한다
		push(로컬저장소 -> 원격저장소) / pull(원격저장소 -> 로컬저장소)

기본명령어
	git -v
	git config --list
	git config --global user.name "깃허브이름"
	git config --global user.email "이메일주소"

	git init
	git status
	git add . or 파일명
	git commit -m "커밋메시지"
	git log
	git log --pretty=oneline
	git checkout 체크섬 or 브랜치이름 or -
	git commit --amend -m "수정할 메시지"

1. 브랜치(branch)
	한개의 저장소를 여러 갈래로 나누어 관리할 수 있게 해주는 개념
	브랜치끼리는 서로 영향을 받지 않기 때문에 개별적인 작업을 진행할 수 있다
	Git은 기본적으로 master 브랜치를 메인으로 사용한다
	GitHub는 기본적으로 main 브랜치를 메인으로 사용한다
	
1) 브랜치 명령어
	git branch	
		현재 브랜치 목록 보기
	git branch 브랜치이름
		새 브랜치 만들기
	git checkout 브랜치 이름
	git switch 브랜치 이름
		브랜치 이동
	git switch -c 브랜치이름
		브랜치를 만들고 해당브랜치로 바로 이동
	git branch -D 브랜치이름
		브랜치 삭제
	git branch -m 기존이름 변경할이름
		브랜치명 수정

2) 브랜치를 사용하는 이유
	원본(main)을 안전하게 보호하기 위함
	기능별로 따로 작업 가능하기 때문에
	협업에 유리함

[실습1] 브랜치 생성, 병합, 삭제
workspace > project02 폴더 생성
git bash 열고 git init => .git 폴더 생성 확인

1. main 브랜치에서 기본 파일을 만든다
	readme.txt
	250612 10:28 기본 파일 생성

	$ git branch -m master main
	project02 폴더에 새 텍스트 파일 생성 => readme.txt 파일명으로 250612 10:28 기본 파일 생성이라고 쓰고 저장

2. 커밋 메시지 날짜 시간 main브랜치-readme.txt 파일 생성
	$ git status
	$ git add .
	$ git status
	$ git commit -m "250612 11:28 main브랜치-readme.txt"
	$ git status

3. 새로운 브랜치 생성 후 dev 브랜치로 이동한다
	dev
	sec
	test
	$ git branch dev
	$ git branch sec
	$ git branch test
	$ git switch dev

4. dev 브랜치에서 dev_note.txt 파일 생성 저장 후 커밋한다
	이 공간은 dev 브랜치에서 작업중입니다
	
	project02 폴더에서 dev_note.txt 파일 생성, 이 공간은 dev 브랜치에서 작업중입니다 작성 후 저장
	$ git status (브랜치 항상 확인!!!)
	$ git add .
	$ git status
	$ git commit -m "250612 11:30 dev_note.txt 파일 생성"
	$ git log

5. sec 브랜치에서 sec_note.txt 파일 생성 저장 후 커밋한다
	이 공간은 sec 브랜치에서 작업중입니다
	
	$ git switch sec
	나머지는 4번과 동일

6. test 브랜치에 dev 브랜치를 병합하고 상태 확인한다
	$ git switch test
	$ git status
	$ git log (1개)
	$ git merge dev (merge 하기 전에 브랜치를 반드시 확인)
	$ git log (2개)

7. test 브랜치에 있는 파일 dev_note.txt에서
	dev 브랜치에서 test브랜치로 옮겨왔습니다 라는 내용을 추가한다
	
	dev_note.txt 파일 내용을 수정한다
	
	$ git status
	$ git add .
	$ git status
	$ git commit -m "250612 11:33 test브랜치-dev_note.txt 파일 내용 추가"
	$ git status
	$ git log

8. dev 브랜치에 test 브랜치를 병합하고 상태 확인한다

	$ git switch dev
	$ git merge test
	$ git log

+. test 브랜치에서 dev_note.txt 모든 내용 삭제 test만 쓴 후 커밋
   dev 브랜치에서 test브랜치를 병합

	$ git switch test
	dev_note.txt 파일 내용 모두 삭제후 test 쓰고 저장
	$ git status
	$ git add .
	$ git commit -m "날짜 시간 test브랜치-dev_note 파일 기존 내용 삭제, test만 추가"
	$ git log
	$ git switch dev
	$ git merge test
	$ git log

2. 원격 저장소(Remote Repository)
1) 저장소의 종류
	로컬 저장소	개인 pc에서 사용하는 저장소
	원격 저장소	git-hub 같은 사이트 등을 이용하여 어떤 서버에 올려놓고 사용하는 저장소이다

https://github.com/yeoungsun/kdt_test01.git

2) 원격 저장소 관련 명령어
	git remote add 원격저장소이름 주소
		원격 저장소를 먼저 만들어야한다!!
		원격 저장소를 내 로컬과 연결하는 명령어
		보통 원격 개인 저장소 이름은 origin을 많이 사용한다
		
	git remote -v
		원격 저장소와 연결이 잘 되었는지 확인하는 명령어
		origin 주소 (fetch)
		origin 주소 (push)
		둘 다 떠야 정상이다
		- fetch : 일종의 새로고침 역할
		- push : 원격저장소에 파일을 올릴 때 사용한다
	
	git pull 원격저장소이름 브랜치이름
		원격 저장소에 저장한 파일들을 로컬 저장소로 가져오는 명령어

	git push 원격저장소이름 브랜치이름
		로컬 저장소에 커밋한 파일을 원격 저장소에 저장하는 명령어

	git clone 원격저장소주소 저장할경로
		원격 저장소에 있는 파일들을 복사하여 로컬 저장소로 가져오는 명령어
		다른 사람이 서버에 올려놓은 git저장소를 내 컴퓨터에 똑같이 복사해오는 용도로 사용한다
		보통 처음 세팅을 할 때 사용한다

		주의사항!!! 클론할 때는 git init을 하지 않는다!!!!
		git init은 내 로컬에서 .git폴더를 생성해서 처음부터 관리하는 것이고
		git clone은 다른 사람이 관리하던 log 내용까지 전부 복제해오는 것이다

	fatal : refusing to merge unrelated histories 에러 발생
	두개의 깃 저장소에 서로 다른 히스토리를 가지고 있을 때 발생한다
	기본적으로 두 저장소가 공통의 부모 커밋이 없다고 판단되면 에러가 나타난다
	발생 할 수 있는 경우
	- 빈 저장소에서 git init 명령어를 사용해서 새로운 저장소를 만들었을 때
	- 로컬 저장소를 초기화하고 리모트 저장소를 추가한 후에 리모트 저장소에서 변경사항을 가져올 때

	해결 방안
	git pull origin main --allow-unrelated-histories
	두 저장소의 히스토리를 강제로 병합하는 명령어
	항상 현재 변경사항의 내용을 백업하고 검토한 후에 사용해야한다(병합이 문제를 일으킬 가능성이 있기 때문)

[실습]
1. 폴더 생성 / 원격 레포지토리 생성
2. 초기 세팅(init)
3. 원격 저장소와 로컬 저장소 연결(remote add, pull)
4. 브랜치명은 main, team, test
5. test 브랜치 파일 3개를 push
6. team 브랜치에는 본인이름 이니셜 파일 1개 생성 후 push

[실습]
팀장 개인 원격 레포지토리(team00)
	readme.md 
	# 팀이름
	# 팀장이름

	개인 로컬 레포지토리(team00)
	이니셜.txt

브런치 main, 이니셜
	커밋은 무조건 이니셜 브런치에서 진행
	push는 무조건 main 브런치에서 진행

팀원
	개인 원격 레포지토리 생성
	개인 로컬 레포지토리 생성(폴더만 만들기)
	공유받은 git 링크 그대로 clone

1. 첫번째 파일을 생성하고 commit 한 상태이다. 두 번째 파일을 생성하고 저장해야하는데 저장하지 않은 상태로 commit을 해버렸다
이전으로 돌아갈 수 있는 방법이 있는가?

	git log로 체크섬 확인(7자리)	=> 첫번째 파일 생성한 commit
	git checkout 체크섬7자리
	
2. 팀원들끼리 색상을 한 줄씩 추가하면서 커밋을 하고 있다
	총 5명의 팀원이 있고 현재 4번째까지 완료한 상태이다(main 브런치)
	2번째 팀원이 잘 못 작성했다고해서 다시 브런치를 만들려고한다(test 브런치)
	어떻게 할 수 있을까?

	마지막 pull 한 상태로 test브런치 만들고 수정하고 commit한 후 main브런치에서 merge하고 push 다시 한다
	두번째부터 새로 만든다
	각자 브런치를 만들었다면 2번째 팀원만 제외하고 merge를 먼저 진행후 2번째 팀원이 수정 완료되면 merge한다
	2번째 팀원이 본인이 작성한 부분만 수정하고 다시 push한다
	
	2번째 팀원이 commit한 부분으로 돌아간다 test 브런치를 만든 뒤 수정 후 test 브런치와 main 브런치를 병합한다



























