day10(java8일차)

복습 -> 메소드2 -> 클래스1


0. 복습
1) 배열의 사용 목적
	하나의 자료형으로 여러가지 값을 저장할 수 있는 저장공간
		
2) 배열의 사용 목적
	데이터의 집합을 효율적으로 관리하기 위한 목적
	데이터의 순서를 보존하기 위한 목적
	반복문을 사용하여 배열의 요소를 처리하기위한 목적
	메모리를 효율적으로 사용하기 위한 목적
	데이터를 정렬하거나 검색하기 위한 목적

3) 배열의 선언
	자료형[] 배열명 = {값1, 값2...};	
 	자료형[] 배열명 = new 자료형[칸수];
	자료형[] 배열명 = null;

	자료형[][] 배열명 = {{값1,값2..},{값1,값2..}};
	자료형[][] 배열명 = new 자료형[행][열];

4) 메소드
	기능
	어떠한 기능을 하는 코드들의 묶음
	이름뒤에 소괄호
	
	-함수 : 클래스 밖에 선언되어 ㄴ있는것
	-메소드 : 클래스 안에 선언되어 있는 것

5) 메소드 정의
	선언부	리턴타입 메소드명(자료형 매개변수)
	구현부	{
			실행할 코드;
			return 리턴값;
		}
	
6) 메소드 호출
-매개변수x 리턴값x
	객체명.메소드명();
-매개변수o 리턴값x
	객체명.메소드명(인수);
-매개변수x 리턴값o
	syso(객체명.메소드명());
	리턴타입과 동일한 자료형 변수명 = 객체명.메소드명();
-매개변수o 리턴값o
	syso(객체명.메소드명(인수));
	리턴타입과 동일한 자료형 변수명 = 객체명.메소드명(인수);



1.메소드
1)메소드와 메모리
	메소드는 실행되면 메모리의 stack 영역에 메소드 싱행에 필요한 저장공간이 생긴다
	그곳에 메소드 내부에서 선언한 변수(매개변수, 지역변수)들의 저장공간이 생긴다
	메소드의 코드가 모두 실행되어 종료되면 stack 영역에서 메소드의 저장공간이 삭제된다(메모리 해제)
	그러면 지역변수의 저장공간이 사라지므로 지역변수는 사용이 불가능하다

+)스택 프레임의 장점
	메모리 관리 효율성 : 메소드를 호출할 때 필요한 메모리를 동적으로 할당하고 호출이 꿑나묜 자동으로 해제된다
	재귀적 호풀 지원 : 재귀 호풀에 각 호출마다 독립적인 스택 프레임이 생성되어 서로 간섭없이 수행괸다
	지역성 : 스탣 메모리의 접근 속도가 빠르며 지역변수와 매개변수는 메모리 겁근 비용이 적다

2) 메소드의 사용이유
	중복된 코드 제거
	높은 재사용성
	유지보수에 유리함
	
30 인수와 매개변수
	인수(Srgument) : 매소드를 사용할 떄 메소드의 매개변수로 전달될 값
	매개변수(Paramrter) : 외부에서 전달받아 값을 저장허고 메소드 내에서 사용될 변수
	
	-메소드의 인수와 매개변수는 반드시 타입과 일치하거나 자동 형변환이 가능한 타입이어야한다
	-return되는 값은 return 타입과 일치하거나 자동 형변환이 가능한 타입이어야한다

4) 메소드 오버로딩(mrthod Overloading)
	다형성 : 같은 코드로 다른 기능을 하는 것
	method : 작업을 수행하는 코드 블록
	Overloading : 과부하, 너무 많이 실음이라는 의미
			프로그래밍에서는 같은 이름을 여러번 사용하는 것을 의미
	같은 이름의 매소드를 여러개 정의하는 것을 의미
	매개변수의 개수, 타입, 순서가 드르면 같은 이름의 메소드로 선언 할 수 있다
	반환타입은 오버로딩에 영향을 주지 않는다

-메소드 오버로딩 조건
	리턴타입은 같아도 상관없음
	매소드의 이름은 동일해야함
	매개변수의 개수, 순서, 타입이 달라야함

-매소드 오버로딩 시 주의사항
	매개변수의 타입, 개수, 순서가 동일한 경우 매개변수의 이름이 다르다고 해서 오버로딩이 아니다
	리턴타입만 다르고 메소드의 리름과 매개변수가 동일한 경우에도 오버로딩이 아니다

-매소드 오버로딩이 필요한 이유
	이름의 통일성 : 비슷한 작업을 수행하는 메소드는 같은 이름을 사ㅛㅇㅇ하면 직관적이다
	코드 가독성 : 여러 작업을 하나의 이름으로 처리할 수 있어 코드가 간결해진다
			(매소드 이름을 따로 기억할 필요가 없다)

-메소드 오버로딩이 가능한 이유
	컴파일러가 메소드 호출시 메소드 이름 뿐만 아니라 매개변수의 정보를 사용해
	정확히 어떤 메소들르 호출할 지 구분하기 때문이다
	
	컴파일 시 메소드 이름이 다르게 지정됨
		컴파일러는 메소드의 이름과 매개변수의 정보를 합쳐서 고유한 시그니처르 생성
		시그니처는 메소드명 + 매개변수의 탕비과 개수로 구성

-컴파일러가 매소드를 선택하는 과정
	매개변수의 개수 확인 : 메소드 호출시 인수값의 개수와 일치하는 메소드를 먼저 찾는다
	매개변수의 탕비 확인 : 메소드 호출 시 전달된 인수닶의 타입과 일치하는 메소드를 찾는다
	타입 뱐환 규칙 적용 : 전당괸 인수값의 타입과 정획히 일치하는 메소드가 없을 경우,
		더 큰 타입으로 변환 가능한 메소드를 호출(작은 타입의 값은 튼 탕비으로 자동 형변환이 가능하기 때문)
	int -> long, floar, double순으로 자동병환 가능
	큰 타입이 호출 우선순위 뒤에 있다


2. call by value 와 call by refrence
	=> 메소드 호출 시 매개변수를 전달한느 방식

1) call by value(pass by value) : 값에 의한 호출
	값을 복사하여 메소드에 전달하는 방식
	메소드 호출시 원보값이 복사되므로 메소드 내부에서 값이 변경되어도 원본에는 영향을 미치지 않음

	매소드에 인수로 전달되는 것은 변수의 값 자체
	-기본 데이터 타입에서 사용
	-메소드 내부레서 값을 변결래도 원본 변수는 변경되지 않으ㅁ

2)call by reference(pass by reference) : 참조에 의한 호출
	참조를 전달하여 메소드에 직접 원본 제이터를 조작할 수 있는 방식
	메소드 호출 시 데이터의 주소(참조값)가 전달되므로, 메소드 내부에서 데잍처를 변경하면 원본 데이터도 변경됨

	-메소그 내부에서 참조된 객체를 수정하면 원본 객체도 변경됨
	-C++ 등의 언어에서 지원되면 java지원되지 않음

		기본데이터타입			참조타입
전달방식		값 자체를복사해서 전달			참조값(주소)를 복사하여 전달
원본 데이터 변경여부 	메소드 내부 뎐경이 원본에 영향없음	참조된 객체를 변경하면 원본 겍체에도 영향있음
참조값 변경 여부	의미없음				참조값 자체를 변경해도 원본 참조값에는 영향없음

+)java동작
	java는 항상 call by value로 동작한다
	기본 데이터 탕비 : 값 자체가 복사되어 전달
	참조타입 : 객체의 참조값(주소)이 복사되어 전당되므로 객체 내부의 데이처는 수정할 수 있지만
		참조값 자체는 변경되지 않는다
	참조타입의 동작이 call by reference처럼 보일 수있지만 실제로는 참조값의 복사(call by value)이다

	기본데이터 타입 : stacj 메모리에 값 자제가 저장된다
	참조타입 : stack 메모리에 참조값이 저장되고, 각체 자체는 heap메모리에 저장된다


+) 복사
	얕은 복사(Shallow Copy) : 참조값이 복사됨(원본과 복사본이 서로 의존적)
		속도 빠름, 메모리 사용량 적음, 간단한 객체나 데이터 구조에서 사용
	깊은 복사(Deep Copy)  : 모든 데이터가 복사됨(원본과 복사본이 서로 독립젇)
		데이터 앵에 비례하여 속도 느림, 매모리 사용량 많음, 데이터 독립성이 중요

3. 객체지향 언어(OOP, Object-Oriented Programming)
	프로그램을 객체로 구성하고 이 객체들 간의 상호작용을 통해 문제를 해결하는 방식

1) 캡슐화(Encapsulation)
	객체의 데이터를 보호하고 외부에서 접근할 수 있는 방법을 제한하는 개념
	객체 => 데이터를 포함한 속성과 동작을 정의하는 메소드를 하나로 묶은 것을 의ㅁ;
	객체 외부에서 내부 데이터를 직접 변경하지 못하게 하고 허용된 메소드를 통해서만 데이터를 변경하거나 사용핳 수 있게 한다.
	데이터(필드)를 provate 접극제한자를 선언하여 외부에서 직접 접근하지 못하게 하고 gette, setter 메소드를 통해서만
	필드에 접근하도록 한다

2) 다형성(Polymotphism)
	다형성을 통해 겉은 이름의 메소드가 객체에 따라 다르게 동작하도록 하는 것을 의미
	메소드 오버로딩, 메소드 오버라이딩, 참조변수의 다형성

3) 상속(Inheritance)
	기존 클래스의 피드와 메소드를 자식 클래스가 물려받아 쓰는 것을 의미(상속을 지원한다)
	상속은 extends 키워드를 사용한다
	단일상속만 지원한다(한번에 하나의 부모클래스만 상속 가능)

4) 추상화(Abstraction)
	불필요한 세부 수현을 숨기고 중요한 부분만 노출하는 것을 의미
	추상클래스, 인터페이스

5)클래스와 객체
	모든 데이터를 클래스의 형태로 정의하며 객체는 클래스의 인스턴스
	클래스는 개게의 설계도 역할을 하며 필드(속성)와 메소드(동작)을 정의한다


4. 클래스
	추상화된 클래스로 객체를 만들고 객체들 간의 관계를 맺어 상호작용하는 프로그래밍 기법
	추상화(객체모델링) : 공통적인 특징을 파락하려 하나의 묶음으로 만들어내는 것
0)[쉽게 설명]
- 클래스 		비슷한 특징을 가진 것들을 묶어서 만든 일종의 설계도면
		동물클래스, 사람클래스

-클래스 안에 있는 것	설계도면에 따라 만들어진 물건들을 위한 특징(속성, 필드)과 물건이 할 수있는 행동(메소드)

		사람클래스 => 필드 : 이름, 나이, 핸드폰번호, 혈액형, 주소, 주민번호, ...
			메소드 : 걸을 수 있다, 전화할 수 있다, 먹을 수 있다
-속성?		이름, 나이, 핸드폰번호...=> 사람이 가진 특징
-메소드?		걷기, 말하기, 먹기, 공부하기=> 사람이 할 수있는 행동
-객체?		클래스를 만들면 그 설계도면에 따라 실제 물건(객체)를 만들수 있다
		사람클래스 => 영선 객체명을 가진 사람을 만들 수있고, 보라 객체명을 가진 사람을 만들 수 있고...
			각 사람은 자신의 특징을 가지고 있고, 행동을 할 수 있다

1) 클래스
	사용자 정의 타입으로 데이터(필드)와 기능(메소드)를 함께 묶어 관리하는 설계도이다
	클래스를 사용하면 다양한 데이터를 저장허고 관리할 수 있는 객체를 생성할 수 있다

2) 클래스의 특징
-사용자 정의 타입이다(자료형)
	클래스를 사용하면 여러 타입, 여러값을 저장할 수 있는 저장공간을 만들 수있다.
	클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수를 선언해야한다

	변수 : 하나의 자료형으로 하나의 값만 저장할 수있는 저장공간
	배열 : 하나의 자료형으로 여러가지 값을 저장핳 수 있는 저장공간
	
-연관성있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있다
	저장공간과 기능을 나누어 관리하게 되면 코드가 길어졌을 떄 사용라기 불편하다
	이 떄 연관성 있는 저장공간과 기능을 클래스 묶어서 관리할 수 있다

-객체를 생하기 위한 틀, 설계도(면)
	공통되는 속성(변수,필드)과 행위(기능. 행동, 메소드)를 한 번만 선언해 놓고 가져다 사용만 할 수 있도록 설계한다
	추상적인 것(클래스)를 구체화시키면(메모리에 생성된 것) 객체라고 한다
	

3) 객체(Object)와 인스턴스(Instance)
	객체 : 실제 사물 또는 개념
	클래스 : 객체를 컴퓨더에 옯기기 위해 추상화 시킨것, 실제 존재하는 공간이 아니며 추상적이다
	인스턴스 : 클래스를 메모리에 할당시킨 것이며 물리적으로 존재하는 공간, 구체적이다
		객체와 거의 같은 의미지만 클래스로부터 생성된 점을 강조할 때 사용한다

4) 클래스 선언
	class 클래스명{
		//class를 구성하는 핑드와 메소드를 합쳐서 멤버라고 부른다
		필드;	//멤버변수, 전역변수
		메소드(){} //멤버 메소드
	}

-객체화(인스턴스화)
	객체를 만드는 작업, 추상적인 개념을 구체화 시키는 작업

	클래스명 객체명 = new 클래스명();
	클래스명 참조변수 = new 생성자();
	
-객체 멤버 접근 방법
	.	하위연산자, 멤버접근연산자, 닷연산자(~의, ~안에)
	객체명.필드명;

	메소드 호출 방법 4가지에 따라 다르다
	매개변수 x 반환값 x		=>	객체명.메소드명()	
	매개변수 o 반환값 x		=> 	객체명.메소드명(인수);
	매개변수 x 반환값 o		=> 	syso객체명.메소드명());
					자료형 변수명 = 객체명.메소드명(인수);
	매개변수 o 반환값 o		=>	syso(객체명.메소드명(인수));
					자료형 변수명 = 객체명.메소드명(인수);

+) 객체를 생성하고 참조변수에 저장하는 과정	

   class MyClass{
      void myMethod(){}

   }

   public class Main{
      main(){
         
         MyClass refVar =    new MyClass();
         --------------      --------------
         1번         2번
               ------
               3번
      }
   }
1번 : refVar라는 참조변수는 main()메소드 영역에서 만들어진 지역변수이므로 JVM이 관리하는 메모리의 stack영역에 생성된다
   데이터 타입은 참조하려는 대상과 같은 자료형이어야하므로 MyClass라고 지정한다

2번 : new 키워드가 Heap메모리에 MyClass 객체를 생성하고 참조값을 가져온다
   이 때 생성자가 실행된다
3번 : 대입연산자를 통해 오른쪽의 참조값을 왼쪽의 참조 변수에 저장한다


























