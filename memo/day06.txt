java 4일차

1)java
	객체지향언어
	플랫폼 독립성
	자동 메모리관리
2) 변수
	값을 저장할 수 있는 저장공간 
	자료형 변수명 = 값;
3) 입출력 매소드
	출력 메소드
	system.out.println();
	system.out.print();
	system.out.printf();

	입력 메소드
	입력 메소드가 반드시 필요하다
	scanner sc = new scanner(system.in);
	scanner 클래스는 java.uto;; 패키지 안에 있기 째문에 반드시 import 받아와야한다
	
	입력메소드
	.next();
	.nextline();
	.nextInt();
	.nextDouble();

4) 연산자 우선순위
	최우선
	단항
	산술
	쉬프트
	관계
	논리
	삼항
	대입
5) 산술연산자
	+, -, *, /, %

6) 증감연산자
	단항연산자
	++, --
		
1. 관계연산자
	조건식 결과가 참 또는 거짓, 둘 중 하나가 나오는 식(boolean타입으로 결과가 나온다)

	>, < 초과 미만
	>=, <= 이상 이하
	==, != 같다 같지않다

	a > b a가 b보다 크니? 맞으면 true, 틀리면 false
	a < b a가 b보다 작니? 맞으면 true, 틀리면 false
	a >= b a가 b보다 크거나 같니? 맞으면 true, 틀리면 false
	a <= b a가 b보다 작거나 같니? 맞으면 true, 틀리면 false
	a == b a가 b랑 같니? 맞으면 true, 틀리면 false
	a != b a가 b랑 같지않니? 맞으면 true, 틀리면 false

2. 논리연산자
	and	: 두 조건식이 모두 참이면 참
	or	: 두 조건식 중 하나라도 참이면 참
	not	: 조건식이 참이면 거짓, 거짓이면 참

	true && true
	true || false
	!true

3. 삼항연산자(?:)
	조건식? 참일때의 값 : 거짓일때의 값
	삼항연산자의 결과는 값이다
	변수에 저장할 수 있고 출력도 가능하다
	
	거짓일 떄의 값에 삼항연산자를 한번 더 작성하면 삼항연산자의 중펍으로 3개의 값을 출력할 수 있다


4. 비트연산자
1) 비트와 바이트의 개념
	비트 : 정보의 최소 단위
	      한 비트는 0,1 두가지의 값만 표현 가능
	바이트 : 8비트
		영어문자 A ->01000001       
고급언어 -> 컴퓨터 언어(저급언어)로 바꾸는 과정을 생략 가능 -> 연산속도 향상
2) 비트연산자
	AND(&) 논리곱 : 두 비트가 모두 1이면 1 아니면 0
	10 ->   1010
	11 -> & 1011
	     =========
		1010
	OR(|) 논리합 : 하나라도 1이면 1
	10 ->   1010
	11 -> | 1011
	     =========
		1011
	XOR(^) 배타논리합 : 두 비트가 서로 다르면 1
	10 ->   1010
	11 -> ^ 1011
	     =========
		0001
	NOT(~) 논리부정 : 0은 1, 1은 0으로 바꿈
			부호비트 또한 반대로 바꿔줌(양수-> 음수, 음수 -> 양수)
		~n => -(n + 1)
	00001010 => 10
	    0101 => 5
	11110101 => -11

	2의 보수 형식으로 음수를 표현
	00001010
	+      1
	---------
	00001011 => 11
	컴퓨터는 덧셈만 가능하기 때문에 뺄셈을 구현하려면 음수가 필요하다
	비트중 가장 앞에 있는 비트를 최상위 비트라고한다. 최상위 비트는 부호비트로 사용된다(0:양수 1:음수)
	
	1010으로 쓴 양의 정수 10은 앞에 부호비트 01010
	~01010 -> 부호비트가 1로 바뀌기 떄문에 음수로 변환된다

	반전된 이진수 : 11110101
	2의 보수 	: 00001010 -> 00001011


+) 1의 보수 : 이진수의 모든 비트를 반전시켜서 구한다(1 -> 0, 0 -> 1)
		음수를 표현하기 위해 사용되었지만 지금은 2의 보수가 더 많이 사용됨

	양수 5 -> 0101
	1의 보수 -> 1010
	
	음수 표현 : -x -> x의 1의 보수
	0000	양수 0
	1111	음수 -0

+) 2의 보수 : 1의 보수 + 1
	양수 5 -> 0101
	1의 보수 -> 1010 + 1 -> 1011
	
	음수표현 : -x -> x의 2의 보수
	0은 유일한 형태로 존재 0000

3) 쉬프트 연산자(이동)
	좌시프트 A << B : A의 비트를 왼쪽으로 B 만큼 이동시킨다
	오른쪽애 생기는 빈칸은 0으로 채워진다
	지정된 비트수를 넘어가면 잘린다
	ex) 5 << 1  => 10(1010) 왼쪽으로 한번 이동하면 숫자가 2배 증가
	    5 << 2 => 20(10100) 
	우시프트 A >> B : A의 비트를 오른쪽으로 B 만큼 이동시킨다
	완쪽애 생기는 빈칸은 부호비트에 따라 달라진다 (양수면 0으로 채워지고 음수면 1로 채워진다)
	이동 중 잘린 비트는 삭제
	ex) 8 >> 1 => 4(100) 오른쪽으로 한번 이동하면 숫자는 절반으로 줄어듬
	    8 >> 2 => 2

+) 암호화와 복호화
	데이터를 안전하게 전송하거나 저장하기 위한 과정
1) 암호화
	원본 데이터를 변형하여 외부에서 알아보기 어려운 형태로 만든 과정
	특정 알고리즘과 키를 사용하여 원본 데이터를 암호화
	결과로 나온 암호문은 원본 데이터와는 다른 형태의 데이터이며, 키를 알지 못하는 한 해독하기 어렵다
2) 복호화
	암호화된 데이터를 다시 원래의 형태로 되돌리는 과정
	암호화할 때 사용한 알고리즘과 동일한 키를 사용하여 암호화된 데이터를 해독
	복호화된 결과는 원본 데이터로 복원

+)대칭키와 비대칭키
1) 대칭키
	대칭키 암호화는 하나의 키를 사용하여 데이터를 암호화하고 복호화하는 방법
	송 수신자가 같은 키를 가지고있다
	대칭키 암호화는 속도가 빠르고 효율적이며 대부분의 일상적인 데이터 보호 작업에 사용
2) 비대칭키
	두 개의 서로 다른 키(공개키와 비밀키)를 사용하여 데이터를 암호화하고 복호화하는 방법
	공개키는 누구나 알 수 있는 키이며 개인키는 소유자만 알고있어야하는 비밀한 키
	데이커를 공개키로 암호화하면 개인키로만 복호화할 수 있고 개인키로 암호화된 데이터는 공개키로만 복호화할 수 있다
	데이터의 안전한 전송과 디지털 서명에 사용
	
5. 제어문1
	프로그램의 흐름을 제어한다
	조건문	조건식의 결과에 따라서 실행흐름을 결정한다
		if문(if, if~else,if~else if~else), switch문
	반복문	특정 조건을 만족할 떄까지 실행 코드를 반복 실행한다
		for문, while문, do~while문
	기타제어문	흐름을 건너뛰거나 즉시 종료한다
		break문, continue문

6. 조건문
1) if문
	조건식의 결과가 true이녀 중괄호 영역 안으로 들어가서 문장을 실행하도 다음 코드를 순차적으로 실행한다
	조건식의 결과가 false이면 중괄호 영역 안으로 들어가지 않고 다음 코드를 순차적으로 실행한다

*문법	
	if (조건식) {
		조건식이 참일때 실행할 문장;
	}
	조건식이 true면 실행할 문장 실행 후에 순차적으로 실행된다
	조건식이 fals면 if 문 중괄호 실행하지 않고 순차적으로 실행된다

2)if ~ else문
	조건식의 결과가 tru, false 각각의 분기를 만들어서 해당 중괄호 영역안으로 들어가 문장을 실행한다
*문법
	if(조건식){
		조건식이 true일 떄 실행할 문장;
	}else{
		조건식이 false일때 실행할 문장;
	}


3)if ~ else if ~ else 문
	조건식1의 결과가 true if문 중괄호 영역안의 문장 실행
	조건식1의 결과가 false else if문 조건식2를 확인
	조건식2의 결과가 true else if문 중괄호 영역안의 문장 실행
	위의 조건식의 결과가 모두 false라면 else문 중과호 영역안의 문장 실행
*문법
	if (조건식1){
		조건식1이 true일 때 실행할 문장;
	} else if(조건식2){
		조건식1이 false이고 조건식2이 true일 떄 실행할 문장;
	} else{
		조건식1과 조건식2의 결과가 false일 때 실행할 문장;
	}


- if문 : 조건문을 사용할 때 반드시 있어야한다
-else if문 : 확인해야하는 조건식이 2개 이상일 경우 작성
-else문 : 위의 조건식이 모두 거짓일 때 실행할 문장을 작성

if~if문 과 if~else if문 차이?
	if~if문은 모든 조건식을 확인한다
	if~else if 문은 if문의 조건식을 확인 한 뒤 true라면 아래 문장을 스킵한다
*if문의 중첩
	if문 안에 if문이 있는 것을 의미한다
	if(조건식1){
		if(조건식2){
		조건식1과 조건식2가 모두 true;
	}else{
		조건식1만 true;
	}

4) swtich문
	조건식의 값에 따라 여러 case 중 하나를 실행한다
	swtich(변수 or 값){
		case 값1:
			값1일때 실행문;
		case 값2:
			값2일때 실행문;
		case 값3:
			값3일때 실행문
			break;
		...
		default:
			위 값들에 해당하지 않을 때 실행문;
			break;
	}


-switch문애서 사용할 수 있는 변수 타입 : byte, short, int, char, String, enum
사용할 수 없는 변수 타입 : long, float, double, boolean

+)삼항연산자, if문, switch문
-삼항연산자 : 조건문이 1개만 있을 경우
-if문 : 조건식에 논리연산자를 사용하거나 조건식이 2개 이상일 경우
-switch : 하나의 변수에 여러개의 값이 담길 수 있고 case의 값과 같은지 비교할 때 사용


코인 노래방 프로그램
//한곡당 300원, 사용자에게 금액을 입력받고 부를 수 있는 곡 수, 잔돈을 출력하기
금액입력 : 1000
[출력]
3곡을 부를 수 있으며 잔돈은 100원


클래스명 : SingTask01
1)한 곡 당 금액도 입력받기
금액가격 : 1000
곡 당 가격 입력 : 300
[출력]
3곡을 부를 수있으며 잔돈은 100원

2) 잔돈이 부족할 경우 안내하기
금액입력 : 100
곡 당 가격입력 : 
[출력]
입력한 금랙은 100원입니다. 곡 당 가격은 000원으로 000원이 부족하여 노래를 부를 수 없습니다
========
클래스명 : SingTask02
3) 남은 금액으로 음료 구매 가능 여부 추가(한 곡당 금액 200원, 음료 금액 100원)
금액 입력 : 1000
[출력]
5곡을 부를 수 있으며 잔돈은 0원 입니다
음료를 마시고 싶으면 4곡을 부를 수 있고 잔돈은 100원 입니다
=========
클래스명 : SingTask03
4) 총 부른 곡 수에 따른 보너스 지급
5곡을 부르면 1곡 추가 제공




























