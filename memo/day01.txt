day01(git 1일차)
단축키정리 -> git -> git과 github -> git 구조 -> git 설치

0. 단축키 정리
파일탐색기  windows + e
새폴더만들기 ctrl + shift + n
이름바꾸기 F2

- 메모장
글씨 크기 조절 ctrl + 마우스 휠(위아래)
들여쓰기 tab

1. git
- git hub 사이트 가입
https://github.com/

1) 버전(Version)
	프로그램을 수정하여 개선한 것
	정식버전은 1부터 시작하며 수정이 이루어지면서 버전 숫자가 늘어난다

	1.0 -> 1.1 -> 1.2
	1.0 -> 2.0 -> 3.0
	1.0.0 -> 1.1.0 -> 1.1.1
	
	1.0 => 메이저 버전 번호 1, 마이너 버전 번호 0
	1.1.1 => 메이저 버전 번호 1, 마이너 버전 번호 1, 패치 버전 번호 1

2) 버전관리(Version Control)
	버전별로 기록하고 관리하는 것을 의미한다
	버전을 관리하면 백업과 복구가 용이하며 누가 언제 해당 버전을 만들고 수정했는지 추적하기 위함이다

- 로컬 버전 관리
	로컬(내 컴퓨터)에서 버전을 관리하는 방식이다
	작업하는 내용물을 현재 시점에서 복사해두고 압축하여 보관한다
	간단하게 누구나 할 수 있으므로 자주 사용하지만 실수로 지우거나 잘 못 수정하는 경우들이 많다

3) 버전 관리 시스템(Version Control System)
	파일의 변화 내용을 기록, 관리하고 추적을 도와주는 소프트웨어이다
	
2. Git과 GitHub
- git
	여러 버전 관리 시스템 중 하나이다(로컬에서 사용한다)
	git 만의 방식으로 버전별 파일을 저장, 관리한다
	굉장히 빠르고 버전을 분산하여 저장하므로 안전하다
	단, git의 사용방법은 다른 버전관리 시스템에 비해 어렵다는 단점이 있다

- GitHub
	git을 저장하고 공유할 수 있는 서버를 제공하는 사이트 중 하나이다
	GitHub 서버에 내 git을 저장해두면 다른 pc에서도 쉽게 버전을 관리할 수 있으며, 다른 개발자들과 git을 공유하여
	협업이 된다는 장점이 있다

3. Git의 구조
	3가지 영역으로 나뉘며 각 영역에 순차적으로 파일을 올려야한다

1) Working Directory(작업 폴더, 깃 저장소)
	내가 작업하는 공간을 working directory로 설정해둔다
	명령어는 git init을 쓴다
	설정하게 되면 해당 폴더에 .git이라는 폴더가 생성된다(보기 > 숨김폴더 체크)
	
	[파일의 상태]
	working directory 영역에 있는 파일들은 아직 git의 관리 대상이 아니다
	관리 대상이 아닌 파일들을 untracked 상태라고 한다

2) Staging Area(스테이징 영역)
	스테이징 영역에 있는 파일들은 git의 관리 대상이다
	수정, 추가, 삭제 등 이 영역 파일들의 변경사항을 git이 저장하고 관리한다
	
	수정사항을 바로 Local Repository에 커밋하면 실수가 많아질 것이기 때문에 스테이징영역에서
	우선 수정 내용들을 검토하고 확인 후 로컬 저장소에 커밋한다

	[파일의 상태]
	스테이징 영역에 파일을 올리는 것을 staging이라고 한다
	관리 대상 파일을 tracked(추적)상태라고한다

	- tracked 상태의 종류
	unmodified : 수정이 되지 않은 상태
	modified : 스테이징 영역에 들어온 파일 중 수정이 된 상태
	staged : 로컬 저장소에 올릴 준비가 완료된 상태

3) Local Repository(로컬 저장소)
	스테이징 영역에서 staged 상태의 파일을 commit 하면 로컬 저장소에 저장된다
	로컬 저장소에 commit 한다는 것은 스테이징 영역의 수정사항을 확정짓는 것이다
	즉, 새로운 버전을 하나 만들고 저장한 것이다
	내가 원할 때 언제든 저장한 버전으로(commit한 시점)으로 돌아갈 수 있다
	주의 : staged 상태가 아니면 commit 되지 않는다!

4) Remote Repository(원격 저장소)
	git-hub 같은 사이트등을 이용하여 어떤 서버에 올려놓고 사용하는 저장소이다
	주로 협업을 위해 사용한다

4. Git 설치
	설치 여부 확인 
	windows + r (실행) > cmd 입력
	> git 입력시 도움말이 나오면 설치 되어있는 상태

	구글에서 git 검색 > download(최신) > 64bit-Installer 다운받기
	git안의 resource폴더로 파일 이동시키기 > 경로만 C:\git 폴더로 변경 > 설치(next만 누르면 됨)

5. Git 사용하기
1) CLI(Command Line Interface)
	cmd, 터미널 등을 이용하여 명령어로 사용한다
	GUI로 사용하는 것보다 어렵지만 git의 모든 기능을 사용하기 위해서는 CLI로 사용하는 것이 좋다

2) GUI(Graphic User Interface)
	일반 프로그램처럼 눈으로 보고 버튼을 눌러 사용한다
	사용방법이 편리하지만 단순하게 만들어 많은 기능이 없다

6. Git 기초 명령어
	git 명령어는 앞에 항상 git을 붙이고 사용한다
	
	config
		환경설정을 하는 명령어이다
		git 설치 후 반드시 초기설정을 해줘야한다

	git config --global user.name "깃허브 이름"
	git config --global user.email "이메일@주소"
		git-hub와 함께 사용할 것이기 때문에 git-hub 계정의 닉네임과 이메일을 동일하게 설정해야한다
		--global 옵션으로 설정한 내용은 설치후 딱 한 번만 하면된다
		단, 학원 pc는 공용pc기 때문에 git설정이 내 계정으로 되어있는지 확인하고 안되어있으면 재설정이 필요하다

	git config --list 	환경설정 확인하는 명령어
	
	git init		
		현재 위치의 폴더를 working directory(깃 저장소)로 만든다
		.git 숨김폴더가 생성된다

	git status
		현재 깃 저장소에 있는 파일들의 상태를 확인한다

	git add 파일명
	git add .	(.은 현재 폴더를 의미한다)
		작업 폴더의 파일을 스테이징 시킨다
		수정된 파일을 staged 상태로 만들기 위해서 사용한다
		파일명을 작성하는 부분에 .을 사용하면 현재 경로의 모든 파일과 변경사항을 스테이징 한다

	git commit -m "커밋 메시지"
		스테이징 영역의 파일들의 변경사항을 확정짓고 새로운 버전을 로컬 저장소에 저장한다
		커밋을 할 때 어떤 파일에 어떤 수정사항이 있었는지 메시지를 작성하는 것이 좋다
		(메시지를 작성하지 않으면 나중에 버전을 되돌릴 때 어떤 시점으로 가야하는 지 알 수 없다)

	git log
		git에 저장된 commit 기록을 볼 수 있다
		가장 최근 commit부터 상단에 출력된다
		출력 결과의 commit 뒤에 붙는 16진수 해시코드는 해당 commit id 또는 체크섬이라고 부른다
		author 수정자, date 수정일자가 같이 나온다(언제 누가 무엇을 했는지 모두 기록된다) 
	
	git log --pretty=oneline
		커밋 기록을 출력할 때 옵션을 주어 한줄로 깔끔하게 볼 수 있다
	
	git checkout 체크섬 or 브랜치 이름 or -
		원하는 시점으로 이동하는 명령어이다
		log를 통해서 확인한 체크섬(앞7자리)를 복사 붙여넣기(ctrl + insert)하거나 앞 7자리를
		입력하면 해당 시점으로 이동한다
		체크섬 대신 -를 사용하면 가장 최근 커밋으로 돌아간다
	
[실습1]
workspace 폴더에서 아래 순서대로 진행하기
1. project01 폴더를 만든다
2. project01 폴더에서 git bash를 실행한다
3. 현재 폴더를 git 저장소로 만든다
4. 본인이름이니셜.txt 파일을 만들고 파일안에 git 연습 프로젝트라고 작성 후 저장한다
5. 변경된 파일 상태를 확인한다
6. 모든 변경사항을 스테이징 영역에 올린다
7. 날짜와 시간 + 메시지로 커밋한다
8. 커밋 기록을 확인한다

[실습2]
9. project01 폴더 내에 info.txt를 만들고 안에 오늘의 git 학습 내용 정리라고 작성한다
10. 변경된 파일 상태 확인후 스테이징하고 커밋한다
11. info.txt 파일에 본인이 오늘 배운 내용을 5가지만 기억남는대로 작성 후 저장한다
12. 변경된 파일 상태 확인후 스테이징하고 커밋한다
13. 로그기록을 간략하게 확인한다














